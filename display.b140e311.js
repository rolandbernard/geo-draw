"use strict";(self.webpackChunkgeo_draw=self.webpackChunkgeo_draw||[]).push([[95],{706:(t,e,n)=>{n.a(t,(async(t,a)=>{try{n.r(e);var r,i,c=n(168),o=n(671),s=n(144),u=n(326),l=n(340),f=n(215),d=n(120),h=n(392),v=n(466),y=t([v]);function w(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}v=(y.then?(await y)():y)[0];var p=function(t){(0,l.Z)(v,t);var e,n,a=(e=v,n=w(),function(){var t,a=(0,d.Z)(e);if(n){var r=(0,d.Z)(this).constructor;t=Reflect.construct(a,arguments,r)}else t=a.apply(this,arguments);return(0,f.Z)(this,t)});function v(){var t;return(0,o.Z)(this,v),(t=a.call(this)).fetchData(),window.addEventListener("hashchange",t.fetchData.bind((0,u.Z)(t))),t}return(0,s.Z)(v,[{key:"fetchData",value:function(){var t=(window.location.hash||"#/").match(new RegExp("#/?view/(.+)"));if(t){var e=null==t?void 0:t[1];if(e)try{this.data=JSON.parse(atob(e))}catch(t){window.location.hash="#/404"}else window.location.hash="#/404"}}},{key:"render",value:function(){return(0,h.dy)(r||(r=(0,c.Z)(['\n            <div class="display-view-root">\n                <map-renderer .data="','"></map-renderer>\n            </div>\n        '])),this.data)}}],[{key:"properties",get:function(){return{data:{type:Object}}}},{key:"styles",get:function(){return(0,h.iv)(i||(i=(0,c.Z)(["\n            div.display-view-root {\n                width: 100%;\n                height: 100%;\n                background: var(--background-dark);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: white;\n            }\n        "])))}}]),v}(h.oi);customElements.define("display-view",p),a()}catch(k){a(k)}}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzcGxheS5iMTQwZTMxMS5qcyIsIm1hcHBpbmdzIjoiaWdCQUtNQSxFQUFBQSxTQUFBQSxJLCtMQXVDRixhQUFjLDZCQUNWLGdCQUNLQyxZQUNMQyxPQUFPQyxpQkFBaUIsYUFBYyxFQUFLRixVQUFVRyxNQUFmLFlBSDVCLEUsd0NBakJkLFdBQ0ksSUFDTUMsR0FET0gsT0FBT0ksU0FBU0MsTUFBUSxNQUNiQyxNQUFNLElBQUlDLE9BQU8saUJBQ3pDLEdBQUdKLEVBQVksQ0FDWCxJQUFNSyxFQUFPTCxNQUFBQSxPQUFILEVBQUdBLEVBQWEsR0FDMUIsR0FBSUssRUFHQSxJQUNJQyxLQUFLRCxLQUFPRSxLQUFLQyxNQUFNQyxLQUFLSixJQUM5QixNQUFNSyxHQUNKYixPQUFPSSxTQUFTQyxLQUFPLGFBTDNCTCxPQUFPSSxTQUFTQyxLQUFPLFcsb0JBaUJuQyxXQUNJLE9BQU9TLEVBQUFBLEVBQUFBLElBQVAsMkpBRStCTCxLQUFLRCxTLHVCQTlDeEMsV0FDSSxNQUFPLENBQ0hBLEtBQU0sQ0FBQ08sS0FBTUMsVyxrQkFJckIsV0FDSSxPQUFPQyxFQUFBQSxFQUFBQSxJQUFQLHlWLEVBVEZuQixDQUFvQm9CLEVBQUFBLElBdUQxQkMsZUFBZUMsT0FBTyxlQUFnQnRCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW8tZHJhdy8uL3NyYy92aWV3L2Rpc3BsYXktdmlldy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IGNzcywgaHRtbCwgTGl0RWxlbWVudCB9IGZyb20gJ2xpdCdcblxuaW1wb3J0ICcuLi9tYXAvbWFwLXJlbmRlcmVyJztcblxuY2xhc3MgRGlzcGxheVZpZXcgZXh0ZW5kcyBMaXRFbGVtZW50IHtcblxuICAgIHN0YXRpYyBnZXQgcHJvcGVydGllcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHt0eXBlOiBPYmplY3R9LFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBzdHlsZXMoKSB7XG4gICAgICAgIHJldHVybiBjc3NgXG4gICAgICAgICAgICBkaXYuZGlzcGxheS12aWV3LXJvb3Qge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLWRhcmspO1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgZmV0Y2hEYXRhKCkge1xuICAgICAgICBjb25zdCBwYXRoID0gd2luZG93LmxvY2F0aW9uLmhhc2ggfHwgJyMvJztcbiAgICAgICAgY29uc3QgZGF0YV9tYXRjaCA9IHBhdGgubWF0Y2gobmV3IFJlZ0V4cCgnIy8/dmlldy8oLispJykpO1xuICAgICAgICBpZihkYXRhX21hdGNoKSB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gZGF0YV9tYXRjaD8uWzFdO1xuICAgICAgICAgICAgaWYoIWRhdGEpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9ICcjLzQwNCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IEpTT04ucGFyc2UoYXRvYihkYXRhKSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyMvNDA0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5mZXRjaERhdGEoKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aGlzLmZldGNoRGF0YS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpc3BsYXktdmlldy1yb290XCI+XG4gICAgICAgICAgICAgICAgPG1hcC1yZW5kZXJlciAuZGF0YT1cIiR7dGhpcy5kYXRhfVwiPjwvbWFwLXJlbmRlcmVyPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxuXG59XG5cbmN1c3RvbUVsZW1lbnRzLmRlZmluZSgnZGlzcGxheS12aWV3JywgRGlzcGxheVZpZXcpO1xuIl0sIm5hbWVzIjpbIkRpc3BsYXlWaWV3IiwiZmV0Y2hEYXRhIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImJpbmQiLCJkYXRhX21hdGNoIiwibG9jYXRpb24iLCJoYXNoIiwibWF0Y2giLCJSZWdFeHAiLCJkYXRhIiwidGhpcyIsIkpTT04iLCJwYXJzZSIsImF0b2IiLCJlIiwiaHRtbCIsInR5cGUiLCJPYmplY3QiLCJjc3MiLCJMaXRFbGVtZW50IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiXSwic291cmNlUm9vdCI6IiJ9