(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{48:function(module,exports,__webpack_require__){"use strict";eval("\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n           (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n           (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///48\n")},50:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js\nvar slicedToArray = __webpack_require__(21);\nvar slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\nvar taggedTemplateLiteral = __webpack_require__(10);\nvar taggedTemplateLiteral_default = /*#__PURE__*/__webpack_require__.n(taggedTemplateLiteral);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js\nvar classCallCheck = __webpack_require__(12);\nvar classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js\nvar createClass = __webpack_require__(13);\nvar createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js\nvar inherits = __webpack_require__(18);\nvar inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(19);\nvar possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(17);\nvar getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);\n\n// EXTERNAL MODULE: ./node_modules/lit-element/lit-element.js + 5 modules\nvar lit_element = __webpack_require__(11);\n\n// EXTERNAL MODULE: ./node_modules/earcut/src/earcut.js\nvar earcut = __webpack_require__(48);\nvar earcut_default = /*#__PURE__*/__webpack_require__.n(earcut);\n\n// EXTERNAL MODULE: ./src/util.js\nvar util = __webpack_require__(29);\n\n// CONCATENATED MODULE: ./src/map/shaders/fill-fragment-shader.glsl\n/* harmony default export */ var fill_fragment_shader = ("\\n#ifdef GL_ES\\n    precision highp float;\\n#endif\\n    \\nuniform vec3 uFillColor;\\n\\nvoid main() {\\n    gl_FragColor = vec4(uFillColor, 1.0);\\n}\\n");\n// CONCATENATED MODULE: ./src/map/shaders/fill-vertex-shader.glsl\n/* harmony default export */ var fill_vertex_shader = ("\\nattribute vec2 aVertexPosition;\\n\\nuniform vec2 uTranslate;\\nuniform vec2 uScale;\\n\\nvoid main() {\\n    gl_Position = vec4((aVertexPosition + uTranslate) * uScale, 0.0, 1.0);\\n}\\n");\n// CONCATENATED MODULE: ./src/map/shaders/stroke-fragment-shader.glsl\n/* harmony default export */ var stroke_fragment_shader = ("\\n#ifdef GL_ES\\n    precision highp float;\\n#endif\\n    \\nuniform vec3 uStrokeColor;\\n\\nvoid main() {\\n    gl_FragColor = vec4(uStrokeColor, 1.0);\\n}\\n    ");\n// CONCATENATED MODULE: ./src/map/shaders/stroke-vertex-shader.glsl\n/* harmony default export */ var stroke_vertex_shader = ("\\nattribute vec2 aVertexPosition;\\nattribute vec2 aVertexNormal;\\n\\nuniform vec2 uTranslate;\\nuniform vec2 uScale;\\nuniform vec2 uStrokeScale;\\nuniform float uWidth;\\n\\nvoid main() {\\n    gl_Position = vec4(\\n        (aVertexPosition + uTranslate) * uScale + normalize(aVertexNormal) * uWidth * uStrokeScale,\\n        0.0, 1.0);\\n}\\n");\n// CONCATENATED MODULE: ./src/map/map-backend-webgl.js\n\n\n\n\n\n\n\n\nfunction _templateObject2() {\n  var data = taggedTemplateLiteral_default()(["\\n            <canvas\\n                id=\\"map\\"\\n                @mousemove=\\"", "\\"\\n                @wheel=\\"", "\\"\\n                @mouseout=\\"", "\\"\\n                @touchstart=\\"", "\\"\\n                @touchmove=\\"", "\\"\\n            >\\n            </canvas>\\n        "]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _templateObject() {\n  var data = taggedTemplateLiteral_default()(["\\n            :host {\\n                width: 100%;\\n                height: 100%;\\n                position: relative;\\n                display: block;\\n            }\\n            #map {\\n                width: 100%;\\n                height: 100%;\\n                max-width: 100%;\\n                max-height: 100%;\\n                display: block;\\n                position: absolute;\\n            }\\n        "]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\n\nvar location_data_cache = {};\n\nvar map_backend_webgl_MapBackendWebGl = /*#__PURE__*/function (_LitElement) {\n  inherits_default()(MapBackendWebGl, _LitElement);\n\n  var _super = _createSuper(MapBackendWebGl);\n\n  createClass_default()(MapBackendWebGl, null, [{\n    key: "properties",\n    get: function get() {\n      return {\n        locations: {\n          type: Array\n        }\n      };\n    }\n  }, {\n    key: "styles",\n    get: function get() {\n      return Object(lit_element["b" /* css */])(_templateObject());\n    }\n  }]);\n\n  function MapBackendWebGl() {\n    var _this;\n\n    classCallCheck_default()(this, MapBackendWebGl);\n\n    _this = _super.call(this);\n    _this.zoom_scale = 1;\n    _this.zoom_center = [0, 0];\n    _this.min = [0, 0];\n    _this.max = [0, 0];\n    _this.current_hover = null;\n    return _this;\n  }\n\n  createClass_default()(MapBackendWebGl, [{\n    key: "setCenterAndScale",\n    value: function setCenterAndScale(center, scale) {\n      this.zoom_center = center;\n      this.zoom_scale = scale;\n    }\n  }, {\n    key: "clientPosToMapPos",\n    value: function clientPosToMapPos(client_pos) {\n      var map = this.shadowRoot.getElementById(\'map\');\n      var map_pos = map.getBoundingClientRect();\n\n      var _this$generateTransla = this.generateTranslateAndScale(),\n          _this$generateTransla2 = slicedToArray_default()(_this$generateTransla, 2),\n          _ = _this$generateTransla2[0],\n          scale = _this$generateTransla2[1];\n\n      var client_pos_norm = [2 * (client_pos[0] - map_pos.x) / map_pos.width - 1.0, 1.0 - 2 * (client_pos[1] - map_pos.y) / map_pos.height];\n      return [client_pos_norm[0] / scale[0] + this.zoom_center[0], client_pos_norm[1] / scale[1] + this.zoom_center[1]];\n    }\n  }, {\n    key: "clientPosToLocationPos",\n    value: function clientPosToLocationPos(client_pos) {\n      var map = this.shadowRoot.getElementById(\'map\');\n      var map_pos = map.getBoundingClientRect();\n\n      var _this$generateTransla3 = this.generateTranslateAndScale(),\n          _this$generateTransla4 = slicedToArray_default()(_this$generateTransla3, 2),\n          transform = _this$generateTransla4[0],\n          scale = _this$generateTransla4[1];\n\n      var client_pos_norm = [2 * (client_pos[0] - map_pos.x) / map_pos.width - 1.0, 1.0 - 2 * (client_pos[1] - map_pos.y) / map_pos.height];\n      return [client_pos_norm[0] / scale[0] - transform[0], client_pos_norm[1] / scale[1] - transform[1]];\n    }\n  }, {\n    key: "locationPosToClientPos",\n    value: function locationPosToClientPos(location_pos) {\n      var map = this.shadowRoot.getElementById(\'map\');\n      var map_pos = map.getBoundingClientRect();\n\n      var _this$generateTransla5 = this.generateTranslateAndScale(),\n          _this$generateTransla6 = slicedToArray_default()(_this$generateTransla5, 2),\n          transform = _this$generateTransla6[0],\n          scale = _this$generateTransla6[1];\n\n      var client_pos_norm = [(location_pos[0] + transform[0]) * scale[0], (location_pos[1] + transform[1]) * scale[1]];\n      return [(client_pos_norm[0] + 1.0) / 2 * map_pos.width + map_pos.x, (1.0 - client_pos_norm[1]) / 2 * map_pos.height + map_pos.y];\n    }\n  }, {\n    key: "handleMouseMove",\n    value: function handleMouseMove(event) {\n      var pos = this.clientPosToLocationPos([event.clientX, event.clientY]);\n\n      var _iterator = _createForOfIteratorHelper(this.locations),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var loc = _step.value;\n\n          if (loc.min[0] <= pos[0] && loc.min[1] <= pos[1] && loc.max[0] >= pos[0] && loc.max[1] >= pos[1]) {\n            var location = location_data_cache[loc.id];\n\n            var _iterator2 = _createForOfIteratorHelper(location.polygons),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var polygon = _step2.value;\n\n                if (polygon.min[0] <= pos[0] && polygon.min[1] <= pos[1] && polygon.max[0] >= pos[0] && polygon.max[1] >= pos[1]) {\n                  for (var i = 0; i < polygon.triangles.length; i += 3) {\n                    var v1 = [polygon.vertices[2 * polygon.triangles[i]], polygon.vertices[2 * polygon.triangles[i] + 1]];\n                    var v2 = [polygon.vertices[2 * polygon.triangles[i + 1]], polygon.vertices[2 * polygon.triangles[i + 1] + 1]];\n                    var v3 = [polygon.vertices[2 * polygon.triangles[i + 2]], polygon.vertices[2 * polygon.triangles[i + 2] + 1]];\n\n                    function sign(p1, p2, p3) {\n                      return (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1]);\n                    }\n\n                    var d1 = sign(pos, v1, v2);\n                    var d2 = sign(pos, v2, v3);\n                    var d3 = sign(pos, v3, v1);\n                    var has_neg = d1 < 0 || d2 < 0 || d3 < 0;\n                    var has_pos = d1 > 0 || d2 > 0 || d3 > 0;\n\n                    if (!(has_neg && has_pos)) {\n                      this.current_hover = loc.id;\n                      var my_event = new Event(\'hover\');\n                      my_event.location = loc;\n                      my_event.position = this.locationPosToClientPos([(polygon.min[0] + polygon.max[0]) / 2, (polygon.min[1] + polygon.max[1]) / 2]);\n                      this.dispatchEvent(my_event);\n                      return;\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this.handleMouseOut();\n    }\n  }, {\n    key: "handleMouseOut",\n    value: function handleMouseOut() {\n      this.current_hover = null;\n      var my_event = new Event(\'hover\');\n      my_event.location = null;\n      my_event.position = null;\n      this.dispatchEvent(my_event);\n    }\n  }, {\n    key: "handleTouchStart",\n    value: function handleTouchStart(event) {\n      if (event.touches.length === 1) {\n        this.handleMouseMove({\n          clientX: event.touches[0].clientX,\n          clientY: event.touches[0].clientY\n        });\n      } else {\n        this.handleMouseOut(event);\n      }\n    }\n  }, {\n    key: "generateTranslateAndScale",\n    value: function generateTranslateAndScale() {\n      var width = this.max[0] - this.min[0];\n      var height = this.max[1] - this.min[1];\n\n      if (width / this.current_size[0] > height / this.current_size[1]) {\n        var translate = [-this.min[0] - width / 2 - this.zoom_center[0], -this.min[1] - height / 2 - this.zoom_center[1]];\n        var scale = [2 / width * this.zoom_scale, -2 * (this.current_size[0] / this.current_size[1]) / width * this.zoom_scale];\n        var stroke_scale = [1, -this.current_size[0] / this.current_size[1]];\n        return [translate, scale, stroke_scale];\n      } else {\n        var _translate = [-this.min[0] - width / 2 - this.zoom_center[0], -this.min[1] - height / 2 - this.zoom_center[1]];\n        var _scale = [2 * (this.current_size[1] / this.current_size[0]) / height * this.zoom_scale, -2 / height * this.zoom_scale];\n        var _stroke_scale = [this.current_size[1] / this.current_size[0], -1];\n        return [_translate, _scale, _stroke_scale];\n      }\n    }\n  }, {\n    key: "renderMapInCanvas",\n    value: function renderMapInCanvas() {\n      if (this.last_center != this.zoom_center || this.last_scale != this.zoom_scale || this.last_hover != this.current_hover || this.last_size != this.current_size) {\n        var gl = this.webgl_data.context;\n        var fill_data = this.webgl_data.fill_data;\n        var stroke_data = this.webgl_data.stroke_data;\n\n        var _this$generateTransla7 = this.generateTranslateAndScale(),\n            _this$generateTransla8 = slicedToArray_default()(_this$generateTransla7, 3),\n            translate = _this$generateTransla8[0],\n            scale = _this$generateTransla8[1],\n            stroke_scale = _this$generateTransla8[2];\n\n        gl.clearColor(0.0, 0.0, 0.0, 0.0);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n\n        var _iterator3 = _createForOfIteratorHelper(this.locations),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var loc = _step3.value;\n            var location = location_data_cache[loc.id]; // Draw stroke\n\n            gl.useProgram(stroke_data.shader_program);\n            gl.uniform2fv(stroke_data.translate_uniform, translate);\n            gl.uniform2fv(stroke_data.scale_uniform, scale);\n            gl.uniform2fv(stroke_data.scale2_uniform, stroke_scale);\n            gl.uniform1f(stroke_data.width_uniform, 0.005);\n            gl.uniform3fv(stroke_data.color_uniform, [0.271, 0.302, 0.38]);\n\n            var _iterator4 = _createForOfIteratorHelper(location.polygons),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var polygon = _step4.value;\n                gl.bindBuffer(gl.ARRAY_BUFFER, polygon.gl_outline_position_buffer);\n                gl.vertexAttribPointer(stroke_data.position_attribute, 2, gl.FLOAT, false, 0, 0);\n                gl.enableVertexAttribArray(stroke_data.position_attribute);\n                gl.bindBuffer(gl.ARRAY_BUFFER, polygon.gl_outline_normal_buffer);\n                gl.vertexAttribPointer(stroke_data.normal_attribute, 2, gl.FLOAT, false, 0, 0);\n                gl.enableVertexAttribArray(stroke_data.normal_attribute);\n                var offset = 0;\n\n                var _iterator6 = _createForOfIteratorHelper(polygon.coords),\n                    _step6;\n\n                try {\n                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                    var part = _step6.value;\n                    gl.drawArrays(gl.TRIANGLE_STRIP, offset * 4, (part.length + 1) * 4);\n                    offset += part.length + 1;\n                  }\n                } catch (err) {\n                  _iterator6.e(err);\n                } finally {\n                  _iterator6.f();\n                }\n              } // Draw fill\n\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n\n            gl.useProgram(fill_data.shader_program);\n            gl.uniform2fv(fill_data.translate_uniform, translate);\n            gl.uniform2fv(fill_data.scale_uniform, scale);\n\n            if (loc.id === this.current_hover) {\n              gl.uniform3fv(fill_data.color_uniform, loc.color.map(function (el) {\n                return el * 0.8;\n              }));\n            } else {\n              gl.uniform3fv(fill_data.color_uniform, loc.color);\n            }\n\n            var _iterator5 = _createForOfIteratorHelper(location.polygons),\n                _step5;\n\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var _polygon = _step5.value;\n                gl.bindBuffer(gl.ARRAY_BUFFER, _polygon.gl_position_buffer);\n                gl.vertexAttribPointer(fill_data.position_attribute, 2, gl.FLOAT, false, 0, 0);\n                gl.enableVertexAttribArray(fill_data.position_attribute);\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _polygon.gl_index_buffer);\n                gl.drawElements(gl.TRIANGLES, _polygon.triangles.length, gl.UNSIGNED_SHORT, 0);\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        this.last_center = this.zoom_center;\n        this.last_scale = this.zoom_scale;\n        this.last_hover = this.current_hover;\n        this.last_size = this.current_size;\n      }\n\n      window.requestAnimationFrame(this.renderMapInCanvas.bind(this));\n    }\n  }, {\n    key: "firstUpdated",\n    value: function firstUpdated() {\n      var _this2 = this;\n\n      var canvas = this.shadowRoot.getElementById(\'map\');\n      this.current_size = [canvas.width, canvas.height];\n      var gl = canvas.getContext(\'webgl\') || canvas.getContext(\'experimental-webgl\');\n\n      function createShaderProgram(vertex_shader_source, fragment_shader_source) {\n        var vertex_shader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertex_shader, vertex_shader_source);\n        gl.compileShader(vertex_shader);\n        var fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragment_shader, fragment_shader_source);\n        gl.compileShader(fragment_shader);\n        var shader_program = gl.createProgram();\n        gl.attachShader(shader_program, vertex_shader);\n        gl.attachShader(shader_program, fragment_shader);\n        gl.linkProgram(shader_program);\n        return shader_program;\n      }\n\n      var fill_shader_program = createShaderProgram(fill_vertex_shader, fill_fragment_shader);\n      var fill_position_attribute = gl.getAttribLocation(fill_shader_program, \'aVertexPosition\');\n      var fill_translate_uniform = gl.getUniformLocation(fill_shader_program, \'uTranslate\');\n      var fill_scale_uniform = gl.getUniformLocation(fill_shader_program, \'uScale\');\n      var fill_color_uniform = gl.getUniformLocation(fill_shader_program, \'uFillColor\');\n      var stroke_shader_program = createShaderProgram(stroke_vertex_shader, stroke_fragment_shader);\n      var stroke_position_attribute = gl.getAttribLocation(stroke_shader_program, \'aVertexPosition\');\n      var stroke_normal_attribute = gl.getAttribLocation(stroke_shader_program, \'aVertexNormal\');\n      var stroke_translate_uniform = gl.getUniformLocation(stroke_shader_program, \'uTranslate\');\n      var stroke_scale_uniform = gl.getUniformLocation(stroke_shader_program, \'uScale\');\n      var stroke_scale2_uniform = gl.getUniformLocation(stroke_shader_program, \'uStrokeScale\');\n      var stroke_width_uniform = gl.getUniformLocation(stroke_shader_program, \'uWidth\');\n      var stroke_color_uniform = gl.getUniformLocation(stroke_shader_program, \'uStrokeColor\');\n\n      var _iterator7 = _createForOfIteratorHelper(this.locations),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var location = _step7.value;\n\n          var _iterator8 = _createForOfIteratorHelper(location_data_cache[location.id].polygons),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var polygon = _step8.value;\n              var position_buffer = gl.createBuffer();\n              gl.bindBuffer(gl.ARRAY_BUFFER, position_buffer);\n              gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(polygon.vertices), gl.STATIC_DRAW);\n              var index_buffer = gl.createBuffer();\n              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, index_buffer);\n              gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(polygon.triangles), gl.STATIC_DRAW);\n              var outline_position_buffer = gl.createBuffer();\n              gl.bindBuffer(gl.ARRAY_BUFFER, outline_position_buffer);\n              gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(polygon.outline_vertices), gl.STATIC_DRAW);\n              var outline_normal_buffer = gl.createBuffer();\n              gl.bindBuffer(gl.ARRAY_BUFFER, outline_normal_buffer);\n              gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(polygon.outline_normals), gl.STATIC_DRAW);\n              polygon.gl_position_buffer = position_buffer;\n              polygon.gl_index_buffer = index_buffer;\n              polygon.gl_outline_position_buffer = outline_position_buffer;\n              polygon.gl_outline_normal_buffer = outline_normal_buffer;\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var handleResize = function handleResize() {\n        canvas.width = canvas.clientWidth;\n        canvas.height = canvas.clientHeight;\n        gl.viewport(0, 0, canvas.width, canvas.height);\n        _this2.current_size = [canvas.width, canvas.height];\n      };\n\n      window.addEventListener(\'resize\', handleResize);\n      handleResize();\n      this.webgl_data = {\n        canvas: canvas,\n        context: gl,\n        fill_data: {\n          shader_program: fill_shader_program,\n          position_attribute: fill_position_attribute,\n          translate_uniform: fill_translate_uniform,\n          scale_uniform: fill_scale_uniform,\n          color_uniform: fill_color_uniform\n        },\n        stroke_data: {\n          shader_program: stroke_shader_program,\n          position_attribute: stroke_position_attribute,\n          normal_attribute: stroke_normal_attribute,\n          translate_uniform: stroke_translate_uniform,\n          scale_uniform: stroke_scale_uniform,\n          scale2_uniform: stroke_scale2_uniform,\n          width_uniform: stroke_width_uniform,\n          color_uniform: stroke_color_uniform\n        }\n      };\n      this.renderMapInCanvas();\n    }\n  }, {\n    key: "disconnectedCallback",\n    value: function disconnectedCallback() {\n      var _this$webgl_data;\n\n      if ((_this$webgl_data = this.webgl_data) === null || _this$webgl_data === void 0 ? void 0 : _this$webgl_data.context) {\n        var gl = this.webgl_data.context;\n\n        var _iterator9 = _createForOfIteratorHelper(this.locations),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var location = _step9.value;\n\n            var _iterator10 = _createForOfIteratorHelper(location_data_cache[location.id].polygons),\n                _step10;\n\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var polygon = _step10.value;\n                gl.deleteBuffer(polygon.gl_position_buffer);\n                gl.deleteBuffer(polygon.gl_index_buffer);\n                gl.deleteBuffer(polygon.gl_outline_position_buffer);\n                gl.deleteBuffer(polygon.gl_outline_normal_buffer);\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        gl.getAttachedShaders(this.webgl_data.fill_data.shader_program).forEach(function (s) {\n          gl.deleteShader(s);\n        });\n        gl.deleteProgram(this.webgl_data.fill_data.fill_shader_program);\n        gl.getAttachedShaders(this.webgl_data.stroke_data.shader_program).forEach(function (s) {\n          gl.deleteShader(s);\n        });\n        gl.deleteProgram(this.webgl_data.stroke_data.shader_program);\n      }\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var min = this.locations.filter(function (loc) {\n        return loc;\n      }).map(function (loc) {\n        return loc.min;\n      }).reduce(function (a, b) {\n        return [Math.min(a[0], b[0]), Math.min(a[1], b[1])];\n      });\n      var max = this.locations.filter(function (loc) {\n        return loc;\n      }).map(function (loc) {\n        return loc.max;\n      }).reduce(function (a, b) {\n        return [Math.max(a[0], b[0]), Math.max(a[1], b[1])];\n      });\n      this.min = min;\n      this.max = max;\n      this.locations.forEach(function (loc) {\n        loc.color = loc.color.map(function (el) {\n          return el / 255;\n        });\n\n        if (loc && !location_data_cache[loc.id]) {\n          location_data_cache[loc.id] = {\n            polygons: loc.coords.map(function (poly) {\n              var data = earcut_default.a.flatten(poly);\n              var triangles = earcut_default()(data.vertices, data.holes, data.dimensions);\n              return {\n                coords: poly,\n                vertices: data.vertices,\n                triangles: triangles,\n                outline_vertices: poly.map(function (part) {\n                  return part.reduce(function (arr, coord) {\n                    return arr.concat([coord, coord, coord, coord]);\n                  }, []).concat([part[0], part[0], part[0], part[0]]);\n                }).flat(3),\n                outline_normals: poly.map(function (part) {\n                  return part.reduce(function (arr, coord, i) {\n                    var last = part[(part.length + i - 1) % part.length];\n                    var from_last = [coord[0] - last[0], coord[1] - last[1]];\n                    var next = part[(i + 1) % part.length];\n                    var to_next = [next[0] - coord[0], next[1] - coord[1]];\n                    return arr.concat([[from_last[1], -from_last[0]], [-from_last[1], from_last[0]], [to_next[1], -to_next[0]], [-to_next[1], to_next[0]]]);\n                  }, []).concat(function () {\n                    var coord = part[0];\n                    var last = part[part.length - 1];\n                    var from_last = [coord[0] - last[0], coord[1] - last[1]];\n                    var next = part[1];\n                    var to_next = [next[0] - coord[0], next[1] - coord[1]];\n                    return [[from_last[1], -from_last[0]], [-from_last[1], from_last[0]], [to_next[1], -to_next[0]], [-to_next[1], to_next[0]]];\n                  }());\n                }).flat(3),\n                min: poly.flat().reduce(function (a, b) {\n                  return [Math.min(a[0], b[0]), Math.min(a[1], b[1])];\n                }),\n                max: poly.flat().reduce(function (a, b) {\n                  return [Math.max(a[0], b[0]), Math.max(a[1], b[1])];\n                })\n              };\n            })\n          };\n        }\n      });\n      return Object(lit_element["c" /* html */])(_templateObject2(), this.handleMouseMove, this.handleMouseMove, this.handleMouseOut, this.handleTouchStart, this.handleTouchStart);\n    }\n  }, {\n    key: "center",\n    get: function get() {\n      return this.zoom_center;\n    }\n  }, {\n    key: "scale",\n    get: function get() {\n      return this.zoom_scale;\n    }\n  }]);\n\n  return MapBackendWebGl;\n}(lit_element["a" /* LitElement */]);\n\ncustomElements.define(\'map-backend\', map_backend_webgl_MapBackendWebGl);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n')}}]);