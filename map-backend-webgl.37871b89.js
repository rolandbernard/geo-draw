"use strict";(self.webpackChunkgeo_draw=self.webpackChunkgeo_draw||[]).push([[238],{964:(e,t,n)=>{n.r(t);var r=n(168),a=n(942),o=n(671),i=n(144),s=n(340),l=n(215),u=n(120),f=n(392),c=n(187),h=n.n(c),d=n(885),v=n(466);function m(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return _(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function _(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var g=function(){function e(){(0,o.Z)(this,e)}return(0,i.Z)(e,[{key:"projection",value:function(e){return v.Z.project(e)}},{key:"applyProjection",value:function(e){for(var t=0;t<e.length;t+=2){var n=this.projection([e[t],e[t+1]]),r=(0,d.Z)(n,2);e[t]=r[0],e[t+1]=r[1]}}},{key:"clientPosToMapPos",value:function(e,t,n){var r=this.generateTranslateAndScale(n),a=(0,d.Z)(r,2),o=(a[0],a[1]),i=[2*(e[0]-t.x)/t.width-1,1-2*(e[1]-t.y)/t.height];return[i[0]/o[0]+n.center[0],i[1]/o[1]+n.center[1]]}},{key:"clientPosToProjPos",value:function(e,t,n){var r=this.generateTranslateAndScale(n),a=(0,d.Z)(r,2),o=a[0],i=a[1],s=[2*(e[0]-t.x)/t.width-1,1-2*(e[1]-t.y)/t.height];return[s[0]/i[0]-o[0],s[1]/i[1]-o[1]]}},{key:"projPosToClientPos",value:function(e,t,n){var r=this.generateTranslateAndScale(n),a=(0,d.Z)(r,2),o=a[0],i=a[1],s=[(e[0]+o[0])*i[0],(e[1]+o[1])*i[1]];return[(s[0]+1)/2*t.width+t.x,(1-s[1])/2*t.height+t.y]}},{key:"generateTranslateAndScale",value:function(e){var t=e.min,n=e.max,r=e.size,a=e.center,o=e.scale,i=n[0]-t[0],s=n[1]-t[1];return i/r[0]>s/r[1]?[[-t[0]-i/2-a[0],-t[1]-s/2-a[1]],[2/i*o,r[0]/r[1]*-2/i*o],[1,-r[0]/r[1]]]:[[-t[0]-i/2-a[0],-t[1]-s/2-a[1]],[r[1]/r[0]*2/s*o,-2/s*o],[r[1]/r[0],-1]]}},{key:"createShaderProgram",value:function(e,t,n){var r=e.createShader(e.VERTEX_SHADER);e.shaderSource(r,t),e.compileShader(r);var a=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(a,n),e.compileShader(a);var o=e.createProgram();return e.attachShader(o,r),e.attachShader(o,a),e.linkProgram(o),o}},{key:"initForContext",value:function(e,t,n,r){var a,o=this.createShaderProgram(t,"\nattribute vec2 aVertexPosition;\n\nuniform vec2 uTranslate;\nuniform vec2 uScale;\n\nvoid main() {\n    gl_Position = vec4((aVertexPosition + uTranslate) * uScale, 0.0, 1.0);\n}\n","\n#ifdef GL_ES\n    precision highp float;\n#endif\n    \nuniform vec3 uFillColor;\n\nvoid main() {\n    gl_FragColor = vec4(uFillColor, 1.0);\n}\n"),i=t.getAttribLocation(o,"aVertexPosition"),s=t.getUniformLocation(o,"uTranslate"),l=t.getUniformLocation(o,"uScale"),u=t.getUniformLocation(o,"uFillColor"),f=this.createShaderProgram(t,"\nattribute vec2 aVertexPosition;\nattribute vec2 aVertexNormal;\n\nuniform vec2 uTranslate;\nuniform vec2 uScale;\nuniform vec2 uStrokeScale;\nuniform float uWidth;\n\nvoid main() {\n    gl_Position = vec4(\n        (aVertexPosition + uTranslate) * uScale + normalize(aVertexNormal) * uWidth * uStrokeScale,\n        0.0, 1.0);\n}\n","\n#ifdef GL_ES\n    precision highp float;\n#endif\n\nuniform vec3 uStrokeColor;\n\nvoid main() {\n    gl_FragColor = vec4(uStrokeColor, 1.0);\n}\n"),c=t.getAttribLocation(f,"aVertexPosition"),h=t.getAttribLocation(f,"aVertexNormal"),d=t.getUniformLocation(f,"uTranslate"),v=t.getUniformLocation(f,"uScale"),_=t.getUniformLocation(f,"uStrokeScale"),g=t.getUniformLocation(f,"uWidth"),p=t.getUniformLocation(f,"uStrokeColor"),x=m(n);try{for(x.s();!(a=x.n()).done;){var P=r[a.value.id],y=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,y),t.bufferData(t.ARRAY_BUFFER,P.vertices,t.STATIC_DRAW);var b=t.createBuffer();t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,b),t.bufferData(t.ELEMENT_ARRAY_BUFFER,P.triangles,t.STATIC_DRAW);var M=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,M),t.bufferData(t.ARRAY_BUFFER,P.outline_triangles,t.STATIC_DRAW);var R=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,R),t.bufferData(t.ARRAY_BUFFER,P.outline_normals,t.STATIC_DRAW),P.gl_position_buffer=y,P.gl_index_buffer=b,P.gl_outline_position_buffer=M,P.gl_outline_normal_buffer=R}}catch(e){x.e(e)}finally{x.f()}this.webgl_data={canvas:e,context:t,fill_data:{shader_program:o,position_attribute:i,translate_uniform:s,scale_uniform:l,color_uniform:u},stroke_data:{shader_program:f,position_attribute:c,normal_attribute:h,translate_uniform:d,scale_uniform:v,scale2_uniform:_,width_uniform:g,color_uniform:p}}}},{key:"deinitResources",value:function(e,t){var n;if(null!==(n=this.webgl_data)&&void 0!==n&&n.context){var r,a=this.webgl_data.context,o=m(e);try{for(o.s();!(r=o.n()).done;){var i=t[r.value.id];a.deleteBuffer(i.gl_position_buffer),a.deleteBuffer(i.gl_index_buffer),a.deleteBuffer(i.gl_outline_position_buffer),a.deleteBuffer(i.gl_outline_normal_buffer)}}catch(e){o.e(e)}finally{o.f()}a.getAttachedShaders(this.webgl_data.fill_data.shader_program).forEach((function(e){a.deleteShader(e)})),a.deleteProgram(this.webgl_data.fill_data.shader_program),a.getAttachedShaders(this.webgl_data.stroke_data.shader_program).forEach((function(e){a.deleteShader(e)})),a.deleteProgram(this.webgl_data.stroke_data.shader_program)}}},{key:"renderMapInContext",value:function(e,t,n){var r=this.webgl_data.context,a=this.webgl_data.fill_data,o=this.webgl_data.stroke_data,i=this.generateTranslateAndScale(n),s=(0,d.Z)(i,3),l=s[0],u=s[1],f=s[2];r.clearColor(0,0,0,0),r.clear(r.COLOR_BUFFER_BIT);for(var c=0;c<e.length;c++){var h=e[c],v=t[h.id];r.useProgram(o.shader_program),r.uniform2fv(o.translate_uniform,l),r.uniform2fv(o.scale_uniform,u),r.uniform2fv(o.scale2_uniform,f),r.uniform1f(o.width_uniform,.005),r.uniform3fv(o.color_uniform,[.271,.302,.38]),r.bindBuffer(r.ARRAY_BUFFER,v.gl_outline_normal_buffer),r.vertexAttribPointer(o.normal_attribute,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(o.normal_attribute),r.bindBuffer(r.ARRAY_BUFFER,v.gl_outline_position_buffer),r.vertexAttribPointer(o.position_attribute,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(o.position_attribute),r.drawArrays(r.TRIANGLES,0,v.outline_triangles.length/2),r.useProgram(a.shader_program),r.uniform2fv(a.translate_uniform,l),r.uniform2fv(a.scale_uniform,u),h.id===n.hover?r.uniform3fv(a.color_uniform,h.color.map((function(e){return.8*e}))):r.uniform3fv(a.color_uniform,h.color),r.bindBuffer(r.ARRAY_BUFFER,v.gl_position_buffer),r.vertexAttribPointer(a.position_attribute,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(a.position_attribute),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,v.gl_index_buffer),r.drawElements(r.TRIANGLES,v.triangles.length,r.UNSIGNED_SHORT,0)}}}]),e}(),p=n(982),x=n(752);var P,y,b=function(e){(0,s.Z)(a,e);var t,n,r=(t=a,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=(0,u.Z)(t);if(n){var a=(0,u.Z)(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return(0,l.Z)(this,e)});function a(){return(0,o.Z)(this,a),r.apply(this,arguments)}return(0,i.Z)(a,[{key:"projection",value:function(e){return(0,p.Z)(e)}},{key:"applyProjection",value:function(e){}},{key:"clientPosToSpherePos",value:function(e,t,n){var r=this.generateScale(n),a=[(2*(e[0]-t.x)/t.width-1)/r[0],(1-2*(e[1]-t.y)/t.height)/r[1],0];if(a[2]=1-a[0]*a[0]-a[1]*a[1],a[2]<0){var o=Math.sqrt(a[0]*a[0]+a[1]*a[1]);a[0]/=o,a[1]/=o,a[2]=0}else a[2]=Math.sqrt(a[2]);return a}},{key:"clientPosToSomePos",value:function(e,t,n){var r=this.clientPosToSpherePos(e,t,n),a=this.mat3VecMul(this.generateTransform(n),r);return[Math.atan2(a[0],a[2]),Math.atan2(a[1],Math.sqrt(a[0]*a[0]+a[2]*a[2]))]}},{key:"normalizeAround",value:function(e,t){return e<t-Math.PI?e+2*Math.PI*Math.floor((t+Math.PI-e)/(2*Math.PI)):e>t+Math.PI?e-2*Math.PI*Math.floor((e+Math.PI-t)/(2*Math.PI)):e}},{key:"clientPosToMapPos",value:function(e,t,n){var r=n.center,a=this.clientPosToSpherePos(e,t,n),o=r[1]+Math.atan2(a[1],Math.sqrt(a[0]*a[0]+a[2]*a[2])),i=this.clientPosToSomePos(e,t,n);return[this.normalizeAround(i[0],r[0]),o]}},{key:"clientPosToProjPos",value:function(e,t,n){return this.normalizePosition(this.clientPosToSomePos(e,t,n))}},{key:"projPosToClientPos",value:function(e,t,n){var r=[Math.cos(e[1])*Math.sin(e[0]),Math.sin(e[1]),Math.cos(e[1])*Math.cos(e[0])],a=this.mat3VecMul(this.generateInverseTransform(n),r);if(a[2]<0){var o=Math.sqrt(a[0]*a[0]+a[1]*a[1]);a[0]/=o,a[1]/=o,a[2]=0}var i=this.generateScale(n);return[(a[0]*i[0]+1)/2*t.width+t.x,(1-a[1]*i[1])/2*t.height+t.y]}},{key:"generateScale",value:function(e){var t=e.size,n=e.scale;return t[0]<t[1]?[n,t[0]/t[1]*n]:[t[1]/t[0]*n,n]}},{key:"mat3Mul",value:function(e,t){for(var n=[0,0,0,0,0,0,0,0,0],r=0;r<3;r++)for(var a=0;a<3;a++)for(var o=0;o<3;o++)n[3*r+a]+=e[3*r+o]*t[3*o+a];return n}},{key:"mat3VecMul",value:function(e,t){for(var n=[0,0,0],r=0;r<3;r++)for(var a=0;a<3;a++)n[r]+=e[3*a+r]*t[a];return n}},{key:"mat3Rotation",value:function(e,t){var n=[0,0,0,0,0,0,0,0,0];return n[3*e+e]=1,n[(e+1)%3*3+(e+1)%3]=Math.cos(t),n[(e+2)%3*3+(e+1)%3]=Math.sin(t),n[(e+1)%3*3+(e+2)%3]=-Math.sin(t),n[(e+2)%3*3+(e+2)%3]=Math.cos(t),n}},{key:"generateTransform",value:function(e){var t=e.center;return this.mat3Mul(this.mat3Rotation(0,t[1]),this.mat3Rotation(1,-t[0]))}},{key:"generateInverseTransform",value:function(e){var t=e.center;return this.mat3Mul(this.mat3Rotation(1,t[0]),this.mat3Rotation(0,-t[1]))}},{key:"normalizePosition",value:function(e){var t=(0,d.Z)(e,2),n=t[0],r=t[1];return r=(r+Math.PI)%(2*Math.PI),(r=(2*Math.PI+r)%(2*Math.PI)-Math.PI)<-Math.PI/2?(n+=Math.PI,r=Math.abs(-Math.PI/2-r)-Math.PI/2):r>Math.PI/2&&(n+=Math.PI,r=Math.PI/2-Math.abs(r-Math.PI/2)),n=(n+Math.PI)%(2*Math.PI),[(n=(2*Math.PI+n)%(2*Math.PI))-Math.PI,r]}},{key:"generateTexMinMax",value:function(e){var t,n=e.center,r=this.generateScale(e),a=this.normalizePosition(n),o=(0,d.Z)(a,2),i=o[0],s=o[1];if(1/(r[0]*r[0])+1/(r[1]*r[1])>1)t=Math.abs(s)<.1?[[.5+i/Math.PI/2-.26,0],[.5+i/Math.PI/2+.26,1]]:s<0?[[0,0],[1,1+s/Math.PI]]:[[0,s/Math.PI],[1,1]];else if(.5-Math.abs(s)/Math.PI<Math.max(.05,.5/r[1]))t=s<0?[[0,0],[1,1+s/Math.PI]]:[[0,s/Math.PI],[1,1]];else{var l=Math.min(.25,.25*(1+(Math.abs(s)/Math.PI>.4?3:1)*Math.abs(s))/r[0]),u=Math.min(.25,.25*(1+Math.abs(s))/r[1]);t=[[.5+i/Math.PI/2-l,.5+s/Math.PI-2*u],[.5+i/Math.PI/2+l,.5+s/Math.PI+2*u]]}return t[0][0]=(1+t[0][0]%1)%1,t[1][0]=(1+t[1][0]%1)%1,t[1][0]<=t[0][0]&&(t[1][0]+=1),t[0][1]=Math.min(1,Math.max(0,t[0][1])),t[1][1]=Math.min(1,Math.max(0,t[1][1])),t}},{key:"initForContext",value:function(e,t,n,r){(0,x.Z)((0,u.Z)(a.prototype),"initForContext",this).call(this,e,t,n,r);var o=t.createTexture();t.bindTexture(t.TEXTURE_2D,o),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,4096,2048,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE);var i=this.createShaderProgram(t,"\nattribute vec2 aVertexPosition;\n\nuniform vec2 uScale;\n\nvarying vec2 vPixelPos;\n\nvoid main() {\n    vPixelPos = aVertexPosition;\n    gl_Position = vec4(uScale * aVertexPosition, 0.0, 1.0);\n}\n\n","\n#ifdef GL_ES\n    precision highp float;\n#endif\n\n#define PI 3.1415926538\n\nuniform sampler2D uSampler;\nuniform vec2 uTexMin;\nuniform vec2 uTexMax;\nuniform mat3 uTransform;\nuniform float uScaleZ;\n\nvarying vec2 vPixelPos;\n\nfloat fmod(float a, float b) {\n    return a - (b * floor(a / b));\n}\n\nvec2 normalizePosition(vec2 pos) {\n    pos.y = fmod(pos.y + PI, 2.0 * PI);\n    pos.y = fmod(2.0 * PI + pos.y, 2.0 * PI) - PI;\n    if (pos.y < -PI / 2.0) {\n        pos.x += PI;\n        pos.y = abs(-PI / 2.0 - pos.y) - PI / 2.0;\n    } else if (pos.y > PI / 2.0) {\n        pos.x += PI;\n        pos.y = PI / 2.0 - abs(pos.y - PI / 2.0);\n    }\n    pos.x = fmod(pos.x + PI, 2.0 * PI);\n    pos.x = fmod(2.0 * PI + pos.x, 2.0 * PI);\n    return vec2(pos.x - PI, pos.y);\n}\n\nvec3 spherePosition() {\n    vec3 pos = vec3(vPixelPos, 0.0);\n    pos.z = 1.0 - pos.x*pos.x - pos.y*pos.y;\n    if (pos.z < 0.0) {\n        float dist = sqrt(pos.x*pos.x + pos.y*pos.y);\n        pos.x /= dist;\n        pos.y /= dist;\n        pos.z = 0.0;\n    } else {\n        pos.z = sqrt(pos.z);\n    }\n    return pos;\n}\n\nvec2 texPosition(vec3 pos) {\n    pos = uTransform * pos;\n    vec2 coord = vec2(\n        atan(pos.x, pos.z),\n        atan(pos.y, sqrt(pos.x*pos.x + pos.z*pos.z))\n    );\n    vec2 lonlat = normalizePosition(coord);\n    return vec2((lonlat.x + PI) / (2.0 * PI), (lonlat.y + PI / 2.0) / PI);\n}\n\nfloat computeLight(vec3 pos, bool water) {\n    vec3 light = normalize(vec3(-1.0, 1.0, 3.0));\n    float c = max(0.0, dot(light, pos));\n    float a = max(0.0, dot(vec3(0.0, 0.0, 1.0), reflect(-light, pos)));\n    a *= a;\n    if (water) {\n        return c * 0.7 + a * 0.1 + 0.2;\n    } else {\n        return c * 0.5 + a * 0.3 + 0.2;\n    }\n}\n\nvec3 waterColor(vec3 pos) {\n    return vec3(0.0, 0.2, 0.4);\n}\n\nvoid main() {\n    bool water = false;\n    vec3 pos = spherePosition();\n    float dist = vPixelPos.x * vPixelPos.x + vPixelPos.y * vPixelPos.y;\n    float edge = (dist - 1.0) * (dist - 1.0);\n    vec2 texCoord = texPosition(pos);\n    if (uTexMin.x <= 1.0 + texCoord.x && uTexMax.x >= 1.0 + texCoord.x) {\n        vec2 texPos = vec2(\n            (texCoord.x + 1.0 - uTexMin.x) / (uTexMax.x - uTexMin.x),\n            (texCoord.y - uTexMin.y) / (uTexMax.y - uTexMin.y)\n        );\n        gl_FragColor = texture2D(uSampler, texPos);\n    } else {\n        vec2 texPos = vec2(\n            (texCoord.x - uTexMin.x) / (uTexMax.x - uTexMin.x),\n            (texCoord.y - uTexMin.y) / (uTexMax.y - uTexMin.y)\n        );\n        gl_FragColor = texture2D(uSampler, texPos);\n    }\n    if (length(gl_FragColor) == 0.0) {\n        gl_FragColor = vec4(waterColor(pos), 1.0);\n        water = true;\n    }\n    if (dist >= 1.0) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    float f = 0.75 * exp(-1.0e4 * edge);\n    gl_FragColor = (1.0 - f) * gl_FragColor + f * vec4(0.5, 0.75, 1.0, 1.0);\n    if (dist < 1.0) {\n        float f = 0.2 * exp(-1.0 / (2.0 - pos.z) * uScaleZ) + 0.2 * (1.0 - pos.z);\n        gl_FragColor = (1.0 - f) * gl_FragColor + f * vec4(0.0, 0.75, 1.0, 1.0);\n    }\n    gl_FragColor.xyz = computeLight(pos, water) * gl_FragColor.xyz;\n}\n\n"),s=t.getAttribLocation(i,"aVertexPosition"),l=t.getUniformLocation(i,"uScale"),f=t.getUniformLocation(i,"uScaleZ"),c=t.getUniformLocation(i,"uSampler"),h=t.getUniformLocation(i,"uTexMin"),d=t.getUniformLocation(i,"uTexMax"),v=t.getUniformLocation(i,"uTransform"),m=new Float32Array(8);m[0]=-2,m[1]=2,m[2]=2,m[3]=2,m[4]=2,m[5]=-2,m[6]=-2,m[7]=-2;var _=new Uint16Array(6);_[0]=0,_[1]=1,_[2]=2,_[3]=2,_[4]=3,_[5]=0;var g=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,g),t.bufferData(t.ARRAY_BUFFER,m,t.STATIC_DRAW);var p=t.createBuffer();t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,p),t.bufferData(t.ELEMENT_ARRAY_BUFFER,_,t.STATIC_DRAW),this.webgl_data.texture=o,this.webgl_data.earth_data={shader_program:i,position_attribute:s,scale_uniform:l,scale2_uniform:f,sampler_uniform:c,texmin_uniform:h,texmax_uniform:d,transform_uniform:v,vertices:m,triangles:_,gl_position_buffer:g,gl_index_buffer:p}}},{key:"deinitResources",value:function(e,t){var n;if(null!==(n=this.webgl_data)&&void 0!==n&&n.context){var r=this.webgl_data.context;r.deleteTexture(this.webgl_data.texture),r.deleteBuffer(this.webgl_data.earth_data.gl_position_buffer),r.deleteBuffer(this.webgl_data.earth_data.gl_index_buffer),r.getAttachedShaders(this.webgl_data.earth_data.shader_program).forEach((function(e){r.deleteShader(e)})),r.deleteProgram(this.webgl_data.earth_data.shader_program)}(0,x.Z)((0,u.Z)(a.prototype),"deinitResources",this).call(this,e,t)}},{key:"renderToTexture",value:function(e,t,n,r,a){var o=this.webgl_data.context,i=this.webgl_data.fill_data,s=this.webgl_data.stroke_data,l=o.createFramebuffer();o.bindFramebuffer(o.FRAMEBUFFER,l);var u=o.COLOR_ATTACHMENT0;o.framebufferTexture2D(o.FRAMEBUFFER,u,o.TEXTURE_2D,this.webgl_data.texture,0),o.viewport(0,0,4096,2048);var f=[2*Math.PI*(.5-(r[0]+a[0])/2),Math.PI*(.5-(r[1]+a[1])/2)],c=[1/(a[0]-r[0])/Math.PI,2/(a[1]-r[1])/Math.PI],h=[.5/(a[0]-r[0])/n.scale,.5/(a[1]-r[1])/n.scale];o.clearColor(0,0,0,0),o.clear(o.COLOR_BUFFER_BIT);for(var d=0;d<=1;d++){for(var v=0;v<e.length;v++){var m=e[v],_=t[m.id];(_.min[0]+f[0])*c[0]<=1&&(_.max[0]+f[0])*c[0]>=-1&&(_.min[1]+f[1])*c[1]<=1&&(_.max[1]+f[1])*c[1]>=-1&&(o.useProgram(s.shader_program),o.uniform2fv(s.translate_uniform,f),o.uniform2fv(s.scale_uniform,c),o.uniform2fv(s.scale2_uniform,h),o.uniform1f(s.width_uniform,.005),o.uniform3fv(s.color_uniform,[.271,.302,.38]),o.bindBuffer(o.ARRAY_BUFFER,_.gl_outline_normal_buffer),o.vertexAttribPointer(s.normal_attribute,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(s.normal_attribute),o.bindBuffer(o.ARRAY_BUFFER,_.gl_outline_position_buffer),o.vertexAttribPointer(s.position_attribute,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(s.position_attribute),o.drawArrays(o.TRIANGLES,0,_.outline_triangles.length/2),o.useProgram(i.shader_program),o.uniform2fv(i.translate_uniform,f),o.uniform2fv(i.scale_uniform,c),m.id===n.hover?o.uniform3fv(i.color_uniform,m.color.map((function(e){return.8*e}))):o.uniform3fv(i.color_uniform,m.color),o.bindBuffer(o.ARRAY_BUFFER,_.gl_position_buffer),o.vertexAttribPointer(i.position_attribute,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(i.position_attribute),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,_.gl_index_buffer),o.drawElements(o.TRIANGLES,_.triangles.length,o.UNSIGNED_SHORT,0))}f[0]+=2*Math.PI}o.viewport(0,0,this.webgl_data.canvas.clientWidth,this.webgl_data.canvas.clientHeight),o.bindFramebuffer(o.FRAMEBUFFER,null)}},{key:"renderMapInContext",value:function(e,t,n){var r=this.webgl_data.context,a=this.webgl_data.earth_data,o=this.generateTexMinMax(n),i=(0,d.Z)(o,2),s=i[0],l=i[1];this.renderToTexture(e,t,n,s,l),r.clearColor(0,0,0,0),r.clearDepth(1),r.clear(r.COLOR_BUFFER_BIT),r.useProgram(a.shader_program),r.uniform2fv(a.scale_uniform,this.generateScale(n)),r.uniform2fv(a.scale_uniform,this.generateScale(n)),r.uniform1fv(a.scale2_uniform,[n.scale]),r.uniform1i(a.sampler_uniform,0),r.uniform2fv(a.texmin_uniform,s),r.uniform2fv(a.texmax_uniform,l),r.uniformMatrix3fv(a.transform_uniform,!1,this.generateTransform(n)),r.bindBuffer(r.ARRAY_BUFFER,a.gl_position_buffer),r.vertexAttribPointer(a.position_attribute,2,r.FLOAT,!1,0,0),r.enableVertexAttribArray(a.position_attribute),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,a.gl_index_buffer),r.drawElements(r.TRIANGLES,a.triangles.length,r.UNSIGNED_SHORT,0)}}]),a}(g);function M(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function R(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,a=function(){};return{s:a,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==n.return||n.return()}finally{if(s)throw o}}}}function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function T(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=(0,u.Z)(e);if(t){var a=(0,u.Z)(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return(0,l.Z)(this,n)}}var E=function(e){(0,s.Z)(n,e);var t=T(n);function n(){var e;return(0,o.Z)(this,n),(e=t.call(this)).location_data={},e.renderer=e.newRenderer(),e.state={center:[0,0],scale:1,min:[0,0],max:[0,0],size:[0,0],hover:null},e}return(0,i.Z)(n,[{key:"newRenderer",value:function(){return new g}},{key:"center",get:function(){return this.state.center}},{key:"scale",get:function(){return this.state.scale}},{key:"setCenterAndScale",value:function(e,t){this.state.center=e,this.state.scale=t}},{key:"clientPosToMapPos",value:function(e){var t=this.shadowRoot.getElementById("map").getBoundingClientRect();return this.renderer.clientPosToMapPos(e,t,this.state)}},{key:"clientPosToProjPos",value:function(e){var t=this.shadowRoot.getElementById("map").getBoundingClientRect();return this.renderer.clientPosToProjPos(e,t,this.state)}},{key:"projPosToClientPos",value:function(e){var t=this.shadowRoot.getElementById("map").getBoundingClientRect();return this.renderer.projPosToClientPos(e,t,this.state)}},{key:"handleMouseMove",value:function(e){var t,n=this.clientPosToProjPos([e.clientX,e.clientY]),r=R(this.locations);try{for(r.s();!(t=r.n()).done;){var a=t.value,o=this.location_data[a.id];if(o.min[0]<=n[0]&&o.min[1]<=n[1]&&o.max[0]>=n[0]&&o.max[1]>=n[1]){var i,s=R(o.polygons);try{for(s.s();!(i=s.n()).done;){var l=i.value;if(l.min[0]<=n[0]&&l.min[1]<=n[1]&&l.max[0]>=n[0]&&l.max[1]>=n[1])for(var u=0;u<l.triangles.length;u+=3){var f=[l.vertices[2*l.triangles[u]],l.vertices[2*l.triangles[u]+1]],c=[l.vertices[2*l.triangles[u+1]],l.vertices[2*l.triangles[u+1]+1]],h=[l.vertices[2*l.triangles[u+2]],l.vertices[2*l.triangles[u+2]+1]];function g(e,t,n){return(e[0]-n[0])*(t[1]-n[1])-(t[0]-n[0])*(e[1]-n[1])}var d=g(n,f,c),v=g(n,c,h),m=g(n,h,f);if(!(d<0||v<0||m<0)||!(d>0||v>0||m>0)){this.state.hover=a.id;var _=new Event("hover");return _.location=a,_.position=this.projPosToClientPos([(l.min[0]+l.max[0])/2,(l.min[1]+l.max[1])/2]),void this.dispatchEvent(_)}}}}catch(p){s.e(p)}finally{s.f()}}}}catch(x){r.e(x)}finally{r.f()}this.handleMouseOut()}},{key:"handleMouseOut",value:function(){this.state.hover=null;var e=new Event("hover");e.location=null,e.position=null,this.dispatchEvent(e)}},{key:"handleTouchStart",value:function(e){1===e.touches.length?this.handleMouseMove({clientX:e.touches[0].clientX,clientY:e.touches[0].clientY}):this.handleMouseOut(e)}},{key:"renderMapInCanvas",value:function(){this.last&&this.last.center==this.state.center&&this.last.scale==this.state.scale&&this.last.hover==this.state.hover&&this.last.size==this.state.size||(this.renderer.renderMapInContext(this.locations,this.location_data,this.state),this.last=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?M(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):M(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},this.state)),window.requestAnimationFrame(this.renderMapInCanvas.bind(this))}},{key:"updated",value:function(){var e=this,t=this.shadowRoot.getElementById("map");if(this.last_canvas!=t){this.last_canvas=t,this.renderer.deinitResources(this.locations,this.location_data);var n=t.getContext("webgl")||t.getContext("experimental-webgl"),r=function(){t.width=t.clientWidth,t.height=t.clientHeight,n.viewport(0,0,t.width,t.height),e.state.size=[t.width,t.height]};window.addEventListener("resize",r),r(),this.renderer.initForContext(t,n,this.locations,this.location_data),this.renderMapInCanvas()}this.last=null}},{key:"generateTriangles",value:function(e){var t,n=[],r=0,a=0,o=0,i=R(e.coords);try{for(i.s();!(t=i.n()).done;){var s,l=t.value,u=R(l);try{for(u.s();!(s=u.n()).done;)o+=s.value.length}catch(e){u.e(e)}finally{u.f()}var f=h().flatten(l);this.renderer.applyProjection(f.vertices);var c=h()(f.vertices,f.holes,f.dimensions);r+=f.vertices.length,a+=c.length,n.push({vertices:new Float32Array(f.vertices),triangles:new Uint16Array(c),min:l.flat().map(this.renderer.projection).reduce((function(e,t){return[Math.min(e[0],t[0]),Math.min(e[1],t[1])]})),max:l.flat().map(this.renderer.projection).reduce((function(e,t){return[Math.max(e[0],t[0]),Math.max(e[1],t[1])]}))})}}catch(e){i.e(e)}finally{i.f()}var d=new Float32Array(r),v=new Uint16Array(a);r=0,a=0;for(var m=0,_=n;m<_.length;m++){var g=_[m];d.set(g.vertices,r);for(var p=0;p<g.triangles.length;p++)v[a+p]=r/2+g.triangles[p];r+=g.vertices.length,a+=g.triangles.length}var x=new Float32Array(24*o),P=new Float32Array(24*o);o=0;var y,b=R(e.coords);try{for(b.s();!(y=b.n()).done;){var M,A=R(y.value);try{for(A.s();!(M=A.n()).done;){for(var T=M.value.map(this.renderer.projection),E=0;E<T.length;E++){var I=T[E],w=T[(T.length+E-1)%T.length],S=T[(E+1)%T.length],F=[I[0]-w[0],I[1]-w[1]],B=[S[0]-I[0],S[1]-I[1]],k=24*o+24*E;x.set([I[0],I[1],I[0],I[1],S[0],S[1],I[0],I[1],S[0],S[1],S[0],S[1],I[0],I[1],I[0],I[1],I[0],I[1],I[0],I[1],I[0],I[1],I[0],I[1]],k),P.set([B[1],-B[0],-B[1],B[0],B[1],-B[0],-B[1],B[0],-B[1],B[0],B[1],-B[0],-F[1],F[0],F[1],-F[0],-B[1],B[0],-F[1],F[0],F[1],-F[0],B[1],-B[0]],k)}o+=T.length}}catch(e){A.e(e)}finally{A.f()}}}catch(e){b.e(e)}finally{b.f()}return{polygons:n,vertices:d,triangles:v,outline_triangles:x,outline_normals:P,min:n.map((function(e){return e.min})).reduce((function(e,t){return[Math.min(e[0],t[0]),Math.min(e[1],t[1])]})),max:n.map((function(e){return e.max})).reduce((function(e,t){return[Math.max(e[0],t[0]),Math.max(e[1],t[1])]}))}}},{key:"buildRenderData",value:function(){var e=this;this.locations.forEach((function(t){t.color=t.color.map((function(e){return e/255})),t&&(e.location_data[t.id]||(e.location_data[t.id]=e.generateTriangles(t)))})),this.state.min=this.locations.map((function(t){return e.location_data[t.id].min})).reduce((function(e,t){return[Math.min(e[0],t[0]),Math.min(e[1],t[1])]})),this.state.max=this.locations.map((function(t){return e.location_data[t.id].max})).reduce((function(e,t){return[Math.max(e[0],t[0]),Math.max(e[1],t[1])]}))}},{key:"render",value:function(){return this.buildRenderData(),(0,f.dy)(P||(P=(0,r.Z)(['\n            <canvas\n                id="map"\n                @mousemove="','"\n                @wheel="','"\n                @mouseout="','"\n                @touchstart="','"\n                @touchmove="','"\n            >\n            </canvas>\n        '])),this.handleMouseMove,this.handleMouseMove,this.handleMouseOut,this.handleTouchStart,this.handleTouchStart)}}],[{key:"properties",get:function(){return{locations:{attribute:!0}}}},{key:"styles",get:function(){return(0,f.iv)(y||(y=(0,r.Z)(["\n            :host {\n                width: 100%;\n                height: 100%;\n                position: relative;\n                display: block;\n            }\n            #map {\n                width: 100%;\n                height: 100%;\n                max-width: 100%;\n                max-height: 100%;\n                display: block;\n                position: absolute;\n            }\n        "])))}}]),n}(f.oi);customElements.define("map-backend",E);var I=function(e){(0,s.Z)(n,e);var t=T(n);function n(){return(0,o.Z)(this,n),t.apply(this,arguments)}return(0,i.Z)(n,[{key:"newRenderer",value:function(){return new b}}]),n}(E);customElements.define("map-backend-3d",I)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,