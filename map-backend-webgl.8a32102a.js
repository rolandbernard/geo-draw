"use strict";(self.webpackChunkgeo_draw=self.webpackChunkgeo_draw||[]).push([[238],{543:(e,t,r)=>{r.a(e,(async(e,n)=>{try{r.r(t);var a,o,i=r(168),s=r(942),l=r(671),u=r(144),f=r(340),c=r(215),h=r(120),d=r(392),_=r(533),v=r(710),m=r(65),g=e([m]);function x(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=P(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(s)throw o}}}}function P(e,t){if(e){if("string"==typeof e)return T(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?T(e,t):void 0}}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function R(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function y(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?R(Object(r),!0).forEach((function(t){(0,s.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):R(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function E(e){var t=A();return function(){var r,n=(0,h.Z)(e);if(t){var a=(0,h.Z)(this).constructor;r=Reflect.construct(n,arguments,a)}else r=n.apply(this,arguments);return(0,c.Z)(this,r)}}function A(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}m=(g.then?(await g)():g)[0];var b=function(e){(0,f.Z)(r,e);var t=E(r);function r(){var e;return(0,l.Z)(this,r),(e=t.call(this)).renderer=e.newRenderer(),e.state={center:[0,0],scale:1,min:[0,0],max:[0,0],size:[0,0],hover:null},e}return(0,u.Z)(r,[{key:"newRenderer",value:function(){return new _.Z}},{key:"center",get:function(){return this.state.center}},{key:"scale",get:function(){return this.state.scale}},{key:"setCenterAndScale",value:function(e,t){this.state.center=e,this.state.scale=t}},{key:"clientPosToMapPos",value:function(e){var t=this.shadowRoot.getElementById("map").getBoundingClientRect();return this.renderer.clientPosToMapPos(e,t,this.state)}},{key:"clientPosToProjPos",value:function(e){var t=this.shadowRoot.getElementById("map").getBoundingClientRect();return this.renderer.clientPosToProjPos(e,t,this.state)}},{key:"projPosToClientPos",value:function(e){var t=this.shadowRoot.getElementById("map").getBoundingClientRect();return this.renderer.projPosToClientPos(e,t,this.state)}},{key:"handleMouseMove",value:function(e){var t,r=this.clientPosToProjPos([e.clientX,e.clientY]),n=null===(t=this.triangulated)||void 0===t?void 0:t.get_intersection(r,this.renderer.project());if(n){var a=this.locations[n[0]],o=this.renderer.project()?a.raw.get_proj_polygon(n[1]):a.raw.get_polygon(n[1]);this.state.hover=a.id;var i=new Event("hover");i.location=a,i.position=this.projPosToClientPos([(o.min[0]+o.max[0])/2,(o.min[1]+o.max[1])/2]),this.dispatchEvent(i)}else this.handleMouseOut()}},{key:"handleMouseOut",value:function(){this.state.hover=null;var e=new Event("hover");e.location=null,e.position=null,this.dispatchEvent(e)}},{key:"handleTouchStart",value:function(e){1===e.touches.length?this.handleMouseMove({clientX:e.touches[0].clientX,clientY:e.touches[0].clientY}):this.handleMouseOut(e)}},{key:"renderMapInCanvas",value:function(){this.last&&this.last.center==this.state.center&&this.last.scale==this.state.scale&&this.last.hover==this.state.hover&&this.last.size==this.state.size||(this.renderer.renderMapInContext(this.locations,this.triangulated,this.state),this.last=y({},this.state)),window.requestAnimationFrame(this.renderMapInCanvas.bind(this))}},{key:"updated",value:function(){var e=this,t=this.shadowRoot.getElementById("map");if(this.last_canvas!=t){this.last_canvas=t,this.renderer.deinitResources(this.locations,this.triangulated);var r=t.getContext("webgl")||t.getContext("experimental-webgl"),n=function(){t.width=t.clientWidth,t.height=t.clientHeight,r.viewport(0,0,t.width,t.height),e.state.size=[t.width,t.height]};window.addEventListener("resize",n),n(),this.renderer.initForContext(t,r,this.locations,this.triangulated),this.renderMapInCanvas()}this.last=null}},{key:"buildRenderData",value:function(){if(!this.triangulated){this.triangulated=m.e6.new();var e,t=x(this.locations);try{for(t.s();!(e=t.n()).done;){var r=e.value;this.triangulated.add_location(r.raw)}}catch(e){t.e(e)}finally{t.f()}this.triangulated.triangulate(this.renderer.project()),this.triangulated.generate_outlines(this.renderer.project()),this.state.min=this.triangulated.min,this.state.max=this.triangulated.max}}},{key:"render",value:function(){return this.buildRenderData(),(0,d.dy)(a||(a=(0,i.Z)(['\n            <canvas\n                id="map"\n                @mousemove="','"\n                @wheel="','"\n                @mouseout="','"\n                @touchstart="','"\n                @touchmove="','"\n            >\n            </canvas>\n        '])),this.handleMouseMove,this.handleMouseMove,this.handleMouseOut,this.handleTouchStart,this.handleTouchStart)}}],[{key:"properties",get:function(){return{locations:{attribute:!0}}}},{key:"styles",get:function(){return(0,d.iv)(o||(o=(0,i.Z)(["\n            :host {\n                width: 100%;\n                height: 100%;\n                position: relative;\n                display: block;\n            }\n            #map {\n                width: 100%;\n                height: 100%;\n                max-width: 100%;\n                max-height: 100%;\n                display: block;\n                position: absolute;\n            }\n        "])))}}]),r}(d.oi);customElements.define("map-backend",b);var p=function(e){(0,f.Z)(r,e);var t=E(r);function r(){return(0,l.Z)(this,r),t.apply(this,arguments)}return(0,u.Z)(r,[{key:"newRenderer",value:function(){return new v.Z}}]),r}(b);customElements.define("map-backend-3d",p),n()}catch(M){n(M)}}))},710:(e,t,r)=>{r.d(t,{Z:()=>f});var n=r(885),a=r(671),o=r(144),i=r(752),s=r(340),l=r(215),u=r(120);var f=function(e){(0,s.Z)(c,e);var t,r,f=(t=c,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,n=(0,u.Z)(t);if(r){var a=(0,u.Z)(this).constructor;e=Reflect.construct(n,arguments,a)}else e=n.apply(this,arguments);return(0,l.Z)(this,e)});function c(){return(0,a.Z)(this,c),f.apply(this,arguments)}return(0,o.Z)(c,[{key:"project",value:function(){return!1}},{key:"clientPosToSpherePos",value:function(e,t,r){var n=this.generateScale(r),a=[(2*(e[0]-t.x)/t.width-1)/n[0],(1-2*(e[1]-t.y)/t.height)/n[1],0];if(a[2]=1-a[0]*a[0]-a[1]*a[1],a[2]<0){var o=Math.sqrt(a[0]*a[0]+a[1]*a[1]);a[0]/=o,a[1]/=o,a[2]=0}else a[2]=Math.sqrt(a[2]);return a}},{key:"clientPosToSomePos",value:function(e,t,r){var n=this.clientPosToSpherePos(e,t,r),a=this.mat3VecMul(this.generateTransform(r),n);return[Math.atan2(a[0],a[2]),Math.atan2(a[1],Math.sqrt(a[0]*a[0]+a[2]*a[2]))]}},{key:"normalizeAround",value:function(e,t){return e<t-Math.PI?e+2*Math.PI*Math.floor((t+Math.PI-e)/(2*Math.PI)):e>t+Math.PI?e-2*Math.PI*Math.floor((e+Math.PI-t)/(2*Math.PI)):e}},{key:"clientPosToMapPos",value:function(e,t,r){var n=r.center,a=this.clientPosToSpherePos(e,t,r),o=n[1]+Math.atan2(a[1],Math.sqrt(a[0]*a[0]+a[2]*a[2])),i=this.clientPosToSomePos(e,t,r);return[this.normalizeAround(i[0],n[0]),o]}},{key:"clientPosToProjPos",value:function(e,t,r){return this.normalizePosition(this.clientPosToSomePos(e,t,r))}},{key:"projPosToClientPos",value:function(e,t,r){var n=[Math.cos(e[1])*Math.sin(e[0]),Math.sin(e[1]),Math.cos(e[1])*Math.cos(e[0])],a=this.mat3VecMul(this.generateInverseTransform(r),n);if(a[2]<0){var o=Math.sqrt(a[0]*a[0]+a[1]*a[1]);a[0]/=o,a[1]/=o,a[2]=0}var i=this.generateScale(r);return[(a[0]*i[0]+1)/2*t.width+t.x,(1-a[1]*i[1])/2*t.height+t.y]}},{key:"generateScale",value:function(e){var t=e.size,r=e.scale;return t[0]<t[1]?[r,t[0]/t[1]*r]:[t[1]/t[0]*r,r]}},{key:"mat3Mul",value:function(e,t){for(var r=[0,0,0,0,0,0,0,0,0],n=0;n<3;n++)for(var a=0;a<3;a++)for(var o=0;o<3;o++)r[3*n+a]+=e[3*n+o]*t[3*o+a];return r}},{key:"mat3VecMul",value:function(e,t){for(var r=[0,0,0],n=0;n<3;n++)for(var a=0;a<3;a++)r[n]+=e[3*a+n]*t[a];return r}},{key:"mat3Rotation",value:function(e,t){var r=[0,0,0,0,0,0,0,0,0];return r[3*e+e]=1,r[(e+1)%3*3+(e+1)%3]=Math.cos(t),r[(e+2)%3*3+(e+1)%3]=Math.sin(t),r[(e+1)%3*3+(e+2)%3]=-Math.sin(t),r[(e+2)%3*3+(e+2)%3]=Math.cos(t),r}},{key:"generateTransform",value:function(e){var t=e.center;return this.mat3Mul(this.mat3Rotation(0,t[1]),this.mat3Rotation(1,-t[0]))}},{key:"generateInverseTransform",value:function(e){var t=e.center;return this.mat3Mul(this.mat3Rotation(1,t[0]),this.mat3Rotation(0,-t[1]))}},{key:"normalizePosition",value:function(e){var t=(0,n.Z)(e,2),r=t[0],a=t[1];return a=(a+Math.PI)%(2*Math.PI),(a=(2*Math.PI+a)%(2*Math.PI)-Math.PI)<-Math.PI/2?(r+=Math.PI,a=Math.abs(-Math.PI/2-a)-Math.PI/2):a>Math.PI/2&&(r+=Math.PI,a=Math.PI/2-Math.abs(a-Math.PI/2)),r=(r+Math.PI)%(2*Math.PI),[(r=(2*Math.PI+r)%(2*Math.PI))-Math.PI,a]}},{key:"generateTexMinMax",value:function(e){var t,r=e.center,a=this.generateScale(e),o=this.normalizePosition(r),i=(0,n.Z)(o,2),s=i[0],l=i[1];if(1/(a[0]*a[0])+1/(a[1]*a[1])>1)t=Math.abs(l)<.1?[[.5+s/Math.PI/2-.26,0],[.5+s/Math.PI/2+.26,1]]:l<0?[[0,0],[1,1+l/Math.PI]]:[[0,l/Math.PI],[1,1]];else if(.5-Math.abs(l)/Math.PI<Math.max(.05,.5/a[1]))t=l<0?[[0,0],[1,1+l/Math.PI]]:[[0,l/Math.PI],[1,1]];else{var u=Math.min(.25,.25*(1+(Math.abs(l)/Math.PI>.4?3:1)*Math.abs(l))/a[0]),f=Math.min(.25,.25*(1+Math.abs(l))/a[1]);t=[[.5+s/Math.PI/2-u,.5+l/Math.PI-2*f],[.5+s/Math.PI/2+u,.5+l/Math.PI+2*f]]}return t[0][0]=(1+t[0][0]%1)%1,t[1][0]=(1+t[1][0]%1)%1,t[1][0]<=t[0][0]&&(t[1][0]+=1),t[0][1]=Math.min(1,Math.max(0,t[0][1])),t[1][1]=Math.min(1,Math.max(0,t[1][1])),t}},{key:"initForContext",value:function(e,t,r,n){(0,i.Z)((0,u.Z)(c.prototype),"initForContext",this).call(this,e,t,r,n);var a=t.createTexture();t.bindTexture(t.TEXTURE_2D,a),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,4096,2048,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE);var o=this.createShaderProgram(t,"\nattribute vec2 aVertexPosition;\n\nuniform vec2 uScale;\n\nvarying vec2 vPixelPos;\n\nvoid main() {\n    vPixelPos = aVertexPosition;\n    gl_Position = vec4(uScale * aVertexPosition, 0.0, 1.0);\n}\n\n","\n#ifdef GL_ES\n    precision highp float;\n#endif\n\n#define PI 3.1415926538\n\nuniform sampler2D uSampler;\nuniform vec2 uTexMin;\nuniform vec2 uTexMax;\nuniform mat3 uTransform;\nuniform float uScaleZ;\n\nvarying vec2 vPixelPos;\n\nfloat fmod(float a, float b) {\n    return a - (b * floor(a / b));\n}\n\nvec2 normalizePosition(vec2 pos) {\n    pos.y = fmod(pos.y + PI, 2.0 * PI);\n    pos.y = fmod(2.0 * PI + pos.y, 2.0 * PI) - PI;\n    if (pos.y < -PI / 2.0) {\n        pos.x += PI;\n        pos.y = abs(-PI / 2.0 - pos.y) - PI / 2.0;\n    } else if (pos.y > PI / 2.0) {\n        pos.x += PI;\n        pos.y = PI / 2.0 - abs(pos.y - PI / 2.0);\n    }\n    pos.x = fmod(pos.x + PI, 2.0 * PI);\n    pos.x = fmod(2.0 * PI + pos.x, 2.0 * PI);\n    return vec2(pos.x - PI, pos.y);\n}\n\nvec3 spherePosition() {\n    vec3 pos = vec3(vPixelPos, 0.0);\n    pos.z = 1.0 - pos.x*pos.x - pos.y*pos.y;\n    if (pos.z < 0.0) {\n        float dist = sqrt(pos.x*pos.x + pos.y*pos.y);\n        pos.x /= dist;\n        pos.y /= dist;\n        pos.z = 0.0;\n    } else {\n        pos.z = sqrt(pos.z);\n    }\n    return pos;\n}\n\nvec2 texPosition(vec3 pos) {\n    pos = uTransform * pos;\n    vec2 coord = vec2(\n        atan(pos.x, pos.z),\n        atan(pos.y, sqrt(pos.x*pos.x + pos.z*pos.z))\n    );\n    vec2 lonlat = normalizePosition(coord);\n    return vec2((lonlat.x + PI) / (2.0 * PI), (lonlat.y + PI / 2.0) / PI);\n}\n\nfloat computeLight(vec3 pos, bool water) {\n    vec3 light = normalize(vec3(-1.0, 1.0, 3.0));\n    float c = max(0.0, dot(light, pos));\n    float a = max(0.0, dot(vec3(0.0, 0.0, 1.0), reflect(-light, pos)));\n    a *= a;\n    if (water) {\n        return c * 0.7 + a * 0.1 + 0.2;\n    } else {\n        return c * 0.5 + a * 0.3 + 0.2;\n    }\n}\n\nvec3 waterColor(vec3 pos) {\n    return vec3(0.0, 0.2, 0.4);\n}\n\nvoid main() {\n    bool water = false;\n    vec3 pos = spherePosition();\n    float dist = vPixelPos.x * vPixelPos.x + vPixelPos.y * vPixelPos.y;\n    float edge = (dist - 1.0) * (dist - 1.0);\n    vec2 texCoord = texPosition(pos);\n    if (uTexMin.x <= 1.0 + texCoord.x && uTexMax.x >= 1.0 + texCoord.x) {\n        vec2 texPos = vec2(\n            (texCoord.x + 1.0 - uTexMin.x) / (uTexMax.x - uTexMin.x),\n            (texCoord.y - uTexMin.y) / (uTexMax.y - uTexMin.y)\n        );\n        gl_FragColor = texture2D(uSampler, texPos);\n    } else {\n        vec2 texPos = vec2(\n            (texCoord.x - uTexMin.x) / (uTexMax.x - uTexMin.x),\n            (texCoord.y - uTexMin.y) / (uTexMax.y - uTexMin.y)\n        );\n        gl_FragColor = texture2D(uSampler, texPos);\n    }\n    if (length(gl_FragColor) == 0.0) {\n        gl_FragColor = vec4(waterColor(pos), 1.0);\n        water = true;\n    }\n    if (dist >= 1.0) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    float f = 0.5 * exp(-1.0e4 * edge);\n    gl_FragColor = (1.0 - f) * gl_FragColor + f * vec4(0.5, 0.75, 1.0, 1.0);\n    if (dist < 1.0) {\n        float f = 0.1 * exp(-1.0 / (2.0 - pos.z) * uScaleZ) + 0.2 * (1.0 - pos.z);\n        gl_FragColor = (1.0 - f) * gl_FragColor + f * vec4(0.0, 0.75, 1.0, 1.0);\n    }\n    gl_FragColor.xyz = computeLight(pos, water) * gl_FragColor.xyz;\n}\n\n"),s=t.getAttribLocation(o,"aVertexPosition"),l=t.getUniformLocation(o,"uScale"),f=t.getUniformLocation(o,"uScaleZ"),h=t.getUniformLocation(o,"uSampler"),d=t.getUniformLocation(o,"uTexMin"),_=t.getUniformLocation(o,"uTexMax"),v=t.getUniformLocation(o,"uTransform"),m=new Float32Array([-2,2,2,2,2,-2,-2,-2]),g=new Uint16Array([0,1,2,2,3,0]),b=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,b),t.bufferData(t.ARRAY_BUFFER,m,t.STATIC_DRAW);var p=t.createBuffer();t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,p),t.bufferData(t.ELEMENT_ARRAY_BUFFER,g,t.STATIC_DRAW),this.webgl_data.texture=a,this.webgl_data.earth_data={shader_program:o,position_attribute:s,scale_uniform:l,scale2_uniform:f,sampler_uniform:h,texmin_uniform:d,texmax_uniform:_,transform_uniform:v,vertices:m,triangles:g,gl_position_buffer:b,gl_index_buffer:p}}},{key:"deinitResources",value:function(e,t){var r;if(null!==(r=this.webgl_data)&&void 0!==r&&r.context){var n=this.webgl_data.context;n.deleteTexture(this.webgl_data.texture),n.deleteBuffer(this.webgl_data.earth_data.gl_position_buffer),n.deleteBuffer(this.webgl_data.earth_data.gl_index_buffer),n.getAttachedShaders(this.webgl_data.earth_data.shader_program).forEach((function(e){n.deleteShader(e)})),n.deleteProgram(this.webgl_data.earth_data.shader_program)}(0,i.Z)((0,u.Z)(c.prototype),"deinitResources",this).call(this,e,t)}},{key:"renderToTexture",value:function(e,t,r,n,a){var o=this.webgl_data.context,i=this.webgl_data.fill_data,s=this.webgl_data.stroke_data,l=this.webgl_data.triangles;o.bindTexture(o.TEXTURE_2D,this.webgl_data.texture);var u=o.createFramebuffer();o.bindFramebuffer(o.FRAMEBUFFER,u);var f=o.COLOR_ATTACHMENT0;o.framebufferTexture2D(o.FRAMEBUFFER,f,o.TEXTURE_2D,this.webgl_data.texture,0),o.viewport(0,0,4096,2048);var c=[2*Math.PI*(.5-(n[0]+a[0])/2),Math.PI*(.5-(n[1]+a[1])/2)],h=[1/(a[0]-n[0])/Math.PI,2/(a[1]-n[1])/Math.PI],d=[.5/(a[0]-n[0])*Math.cbrt(r.scale)/r.scale,.5/(a[1]-n[1])*Math.cbrt(r.scale)/r.scale];o.clearColor(0,0,0,0),o.clear(o.COLOR_BUFFER_BIT);for(var _=new Uint8Array(4*e.length),v=0;v<e.length;v++){for(var m=0;m<3;m++)_[4*v+m]=e[v].color[m],e[v].id===r.hover&&(_[4*v+m]*=.8);_[4*v+3]=255}o.bindTexture(o.TEXTURE_2D,l.texture),o.texImage2D(o.TEXTURE_2D,0,o.RGBA,e.length,1,0,o.RGBA,o.UNSIGNED_BYTE,_),o.useProgram(i.shader_program),o.uniform2fv(i.scale_uniform,h),o.uniform1i(i.colors_uniform,0),o.bindBuffer(o.ARRAY_BUFFER,l.position_buffer),o.vertexAttribPointer(i.position_attribute,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(i.position_attribute),o.bindBuffer(o.ARRAY_BUFFER,l.color_buffer),o.vertexAttribPointer(i.color_attribute,1,o.FLOAT,!1,0,0),o.enableVertexAttribArray(i.color_attribute),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,l.index_buffer);for(var g=0;g<=1;g++)o.uniform2fv(i.translate_uniform,c),o.drawElements(o.TRIANGLES,t.triangles.length,o.UNSIGNED_INT,0),c[0]+=2*Math.PI;o.useProgram(s.shader_program),o.uniform2fv(s.scale_uniform,h),o.uniform2fv(s.scale2_uniform,d),o.uniform1f(s.width_uniform,.0025),o.uniform3fv(s.color_uniform,[.271,.302,.38]),o.bindBuffer(o.ARRAY_BUFFER,l.outline_normal_buffer),o.vertexAttribPointer(s.normal_attribute,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(s.normal_attribute),o.bindBuffer(o.ARRAY_BUFFER,l.outline_position_buffer),o.vertexAttribPointer(s.position_attribute,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(s.position_attribute),c[0]-=4*Math.PI;for(var b=0;b<=1;b++)o.uniform2fv(s.translate_uniform,c),o.drawArrays(o.TRIANGLES,0,t.outline_triangles.length/2),c[0]+=2*Math.PI;o.viewport(0,0,this.webgl_data.canvas.clientWidth,this.webgl_data.canvas.clientHeight),o.bindFramebuffer(o.FRAMEBUFFER,null)}},{key:"renderMapInContext",value:function(e,t,r){var a=this.webgl_data.context,o=this.webgl_data.earth_data,i=this.generateTexMinMax(r),s=(0,n.Z)(i,2),l=s[0],u=s[1];this.renderToTexture(e,t,r,l,u),a.clearColor(0,0,0,0),a.clearDepth(1),a.clear(a.COLOR_BUFFER_BIT),a.bindTexture(a.TEXTURE_2D,this.webgl_data.texture),a.useProgram(o.shader_program),a.uniform2fv(o.scale_uniform,this.generateScale(r)),a.uniform2fv(o.scale_uniform,this.generateScale(r)),a.uniform1fv(o.scale2_uniform,[r.scale]),a.uniform1i(o.sampler_uniform,0),a.uniform2fv(o.texmin_uniform,l),a.uniform2fv(o.texmax_uniform,u),a.uniformMatrix3fv(o.transform_uniform,!1,this.generateTransform(r)),a.bindBuffer(a.ARRAY_BUFFER,o.gl_position_buffer),a.vertexAttribPointer(o.position_attribute,2,a.FLOAT,!1,0,0),a.enableVertexAttribArray(o.position_attribute),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,o.gl_index_buffer),a.drawElements(a.TRIANGLES,o.triangles.length,a.UNSIGNED_SHORT,0)}}]),c}(r(533).Z)},533:(e,t,r)=>{r.d(t,{Z:()=>i});var n=r(885),a=r(671),o=r(144),i=function(){function e(){(0,a.Z)(this,e)}return(0,o.Z)(e,[{key:"project",value:function(){return!0}},{key:"clientPosToMapPos",value:function(e,t,r){var a=this.generateTranslateAndScale(r),o=(0,n.Z)(a,2),i=(o[0],o[1]),s=[2*(e[0]-t.x)/t.width-1,1-2*(e[1]-t.y)/t.height];return[s[0]/i[0]+r.center[0],s[1]/i[1]+r.center[1]]}},{key:"clientPosToProjPos",value:function(e,t,r){var a=this.generateTranslateAndScale(r),o=(0,n.Z)(a,2),i=o[0],s=o[1],l=[2*(e[0]-t.x)/t.width-1,1-2*(e[1]-t.y)/t.height];return[l[0]/s[0]-i[0],l[1]/s[1]-i[1]]}},{key:"projPosToClientPos",value:function(e,t,r){var a=this.generateTranslateAndScale(r),o=(0,n.Z)(a,2),i=o[0],s=o[1],l=[(e[0]+i[0])*s[0],(e[1]+i[1])*s[1]];return[(l[0]+1)/2*t.width+t.x,(1-l[1])/2*t.height+t.y]}},{key:"generateTranslateAndScale",value:function(e){var t=e.min,r=e.max,n=e.size,a=e.center,o=e.scale,i=r[0]-t[0],s=r[1]-t[1];return i/n[0]>s/n[1]?[[-t[0]-i/2-a[0],-t[1]-s/2-a[1]],[2/i*o,n[0]/n[1]*-2/i*o],[1*Math.cbrt(o),Math.cbrt(o)*-n[0]/n[1]]]:[[-t[0]-i/2-a[0],-t[1]-s/2-a[1]],[n[1]/n[0]*2/s*o,-2/s*o],[Math.cbrt(o)*n[1]/n[0],-1*Math.cbrt(o)]]}},{key:"createShaderProgram",value:function(e,t,r){var n=e.createShader(e.VERTEX_SHADER);e.shaderSource(n,t),e.compileShader(n);var a=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(a,r),e.compileShader(a);var o=e.createProgram();return e.attachShader(o,n),e.attachShader(o,a),e.linkProgram(o),o}},{key:"initForContext",value:function(e,t,r,n){t.getExtension("OES_element_index_uint");var a=this.createShaderProgram(t,"\nattribute vec2 aVertexPosition;\nattribute float aVertexColor;\n\nuniform vec2 uTranslate;\nuniform vec2 uScale;\nuniform sampler2D uColors;\n\nvarying vec3 vPixelColor;\n\nvoid main() {\n    vPixelColor = texture2D(uColors, vec2(aVertexColor, 0.5)).xyz;\n    gl_Position = vec4((aVertexPosition + uTranslate) * uScale, 0.0, 1.0);\n}\n\n","\n#ifdef GL_ES\n    precision highp float;\n#endif\n\nvarying vec3 vPixelColor;\n\nvoid main() {\n    gl_FragColor = vec4(vPixelColor, 1.0);\n}\n\n"),o=t.getAttribLocation(a,"aVertexPosition"),i=t.getAttribLocation(a,"aVertexColor"),s=t.getUniformLocation(a,"uTranslate"),l=t.getUniformLocation(a,"uScale"),u=t.getUniformLocation(a,"uColors"),f=this.createShaderProgram(t,"\nattribute vec2 aVertexPosition;\nattribute vec2 aVertexNormal;\n\nuniform vec2 uTranslate;\nuniform vec2 uScale;\nuniform vec2 uStrokeScale;\nuniform float uWidth;\n\nvoid main() {\n    gl_Position = vec4(\n        (aVertexPosition + uTranslate) * uScale\n        + normalize(aVertexNormal) * uWidth * uStrokeScale,\n        0.0, 1.0\n    );\n}\n\n","\n#ifdef GL_ES\n    precision highp float;\n#endif\n\nuniform vec3 uStrokeColor;\n\nvoid main() {\n    gl_FragColor = vec4(uStrokeColor, 1.0);\n}\n\n"),c=t.getAttribLocation(f,"aVertexPosition"),h=t.getAttribLocation(f,"aVertexNormal"),d=t.getUniformLocation(f,"uTranslate"),_=t.getUniformLocation(f,"uScale"),v=t.getUniformLocation(f,"uStrokeScale"),m=t.getUniformLocation(f,"uWidth"),g=t.getUniformLocation(f,"uStrokeColor"),b=t.createTexture();t.bindTexture(t.TEXTURE_2D,b),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE);var p=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,p),t.bufferData(t.ARRAY_BUFFER,n.vertex,t.STATIC_DRAW);var x=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,x),t.bufferData(t.ARRAY_BUFFER,n.color,t.STATIC_DRAW);var P=t.createBuffer();t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,P),t.bufferData(t.ELEMENT_ARRAY_BUFFER,n.triangles,t.STATIC_DRAW);var T=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,T),t.bufferData(t.ARRAY_BUFFER,n.outline_triangles,t.STATIC_DRAW);var R=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,R),t.bufferData(t.ARRAY_BUFFER,n.outline_normals,t.STATIC_DRAW),this.webgl_data={canvas:e,context:t,fill_data:{shader_program:a,position_attribute:o,color_attribute:i,translate_uniform:s,scale_uniform:l,colors_uniform:u},stroke_data:{shader_program:f,position_attribute:c,normal_attribute:h,translate_uniform:d,scale_uniform:_,scale2_uniform:v,width_uniform:m,color_uniform:g},triangles:{position_buffer:p,color_buffer:x,index_buffer:P,texture:b,outline_position_buffer:T,outline_normal_buffer:R}}}},{key:"deinitResources",value:function(e,t){var r;if(null!==(r=this.webgl_data)&&void 0!==r&&r.context){var n=this.webgl_data.context;n.deleteTexture(this.webgl_data.triangles.texture),n.deleteBuffer(this.webgl_data.triangles.position_buffer),n.deleteBuffer(this.webgl_data.triangles.color_buffer),n.deleteBuffer(this.webgl_data.triangles.index_buffer),n.deleteBuffer(this.webgl_data.triangles.outline_position_buffer),n.deleteBuffer(this.webgl_data.triangles.outline_normal_buffer),n.getAttachedShaders(this.webgl_data.fill_data.shader_program).forEach((function(e){n.deleteShader(e)})),n.deleteProgram(this.webgl_data.fill_data.shader_program),n.getAttachedShaders(this.webgl_data.stroke_data.shader_program).forEach((function(e){n.deleteShader(e)})),n.deleteProgram(this.webgl_data.stroke_data.shader_program)}}},{key:"renderMapInContext",value:function(e,t,r){var a=this.webgl_data.context,o=this.webgl_data.fill_data,i=this.webgl_data.stroke_data,s=this.webgl_data.triangles,l=this.generateTranslateAndScale(r),u=(0,n.Z)(l,3),f=u[0],c=u[1],h=u[2];a.clearColor(0,0,0,0),a.clear(a.COLOR_BUFFER_BIT);for(var d=new Uint8Array(4*e.length),_=0;_<e.length;_++){for(var v=0;v<3;v++)d[4*_+v]=e[_].color[v],e[_].id===r.hover&&(d[4*_+v]*=.8);d[4*_+3]=255}a.bindTexture(a.TEXTURE_2D,s.texture),a.texImage2D(a.TEXTURE_2D,0,a.RGBA,e.length,1,0,a.RGBA,a.UNSIGNED_BYTE,d),a.useProgram(o.shader_program),a.uniform2fv(o.translate_uniform,f),a.uniform2fv(o.scale_uniform,c),a.uniform1i(o.colors_uniform,0),a.bindBuffer(a.ARRAY_BUFFER,s.position_buffer),a.vertexAttribPointer(o.position_attribute,2,a.FLOAT,!1,0,0),a.enableVertexAttribArray(o.position_attribute),a.bindBuffer(a.ARRAY_BUFFER,s.color_buffer),a.vertexAttribPointer(o.color_attribute,1,a.FLOAT,!1,0,0),a.enableVertexAttribArray(o.color_attribute),a.bindBuffer(a.ELEMENT_ARRAY_BUFFER,s.index_buffer),a.drawElements(a.TRIANGLES,t.triangles.length,a.UNSIGNED_INT,0),a.useProgram(i.shader_program),a.uniform2fv(i.translate_uniform,f),a.uniform2fv(i.scale_uniform,c),a.uniform2fv(i.scale2_uniform,h),a.uniform1f(i.width_uniform,.0025),a.uniform3fv(i.color_uniform,[.271,.302,.38]),a.bindBuffer(a.ARRAY_BUFFER,s.outline_normal_buffer),a.vertexAttribPointer(i.normal_attribute,2,a.FLOAT,!1,0,0),a.enableVertexAttribArray(i.normal_attribute),a.bindBuffer(a.ARRAY_BUFFER,s.outline_position_buffer),a.vertexAttribPointer(i.position_attribute,2,a.FLOAT,!1,0,0),a.enableVertexAttribArray(i.position_attribute),a.drawArrays(a.TRIANGLES,0,t.outline_triangles.length/2)}}]),e}()},752:(e,t,r)=>{r.d(t,{Z:()=>o});var n=r(120);function a(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=(0,n.Z)(e)););return e}function o(){return o="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,r){var n=a(e,t);if(n){var o=Object.getOwnPropertyDescriptor(n,t);return o.get?o.get.call(arguments.length<3?e:r):o.value}},o.apply(this,arguments)}},885:(e,t,r)=>{r.d(t,{Z:()=>a});var n=r(181);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,o=[],i=!0,s=!1;try{for(r=r.call(e);!(i=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{i||null==r.return||r.return()}finally{if(s)throw a}}return o}}(e,t)||(0,n.Z)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,